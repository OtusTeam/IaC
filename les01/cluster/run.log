za@za-Lenovo-IdeaPad-S340-15IWL:~/Documents/IaC/2git/les01/cluster$ ./run.sh 
++ terraform apply
data.yandex_vpc_network.default: Reading...
data.yandex_vpc_network.default: Read complete after 1s [id=enpjr0b65u0olvuotmdf]
data.yandex_vpc_subnet.by_id["fl8n8apm16arg05hh4k3"]: Reading...
data.yandex_vpc_subnet.by_id["e9bop98iu12teftg4uj8"]: Reading...
data.yandex_vpc_subnet.by_id["e2l3co6r10mp14ro4ff6"]: Reading...
data.yandex_vpc_subnet.by_id["e9bop98iu12teftg4uj8"]: Read complete after 0s [id=e9bop98iu12teftg4uj8]
data.yandex_vpc_subnet.by_id["fl8n8apm16arg05hh4k3"]: Read complete after 0s [id=fl8n8apm16arg05hh4k3]
data.yandex_vpc_subnet.by_id["e2l3co6r10mp14ro4ff6"]: Read complete after 0s [id=e2l3co6r10mp14ro4ff6]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # yandex_compute_instance.lemp[0] will be created
  + resource "yandex_compute_instance" "lemp" {
      + created_at                = (known after apply)
      + folder_id                 = (known after apply)
      + fqdn                      = (known after apply)
      + gpu_cluster_id            = (known after apply)
      + hardware_generation       = (known after apply)
      + hostname                  = (known after apply)
      + id                        = (known after apply)
      + maintenance_grace_period  = (known after apply)
      + maintenance_policy        = (known after apply)
      + metadata                  = {
          + "ssh-keys" = (sensitive value)
        }
      + name                      = "les01-backend-lemp-1"
      + network_acceleration_type = "standard"
      + platform_id               = "standard-v1"
      + status                    = (known after apply)
      + zone                      = "ru-central1-b"

      + boot_disk {
          + auto_delete = true
          + device_name = (known after apply)
          + disk_id     = (known after apply)
          + mode        = (known after apply)

          + initialize_params {
              + block_size  = (known after apply)
              + description = (known after apply)
              + image_id    = "fd89eh9ba36b7cggtan6"
              + name        = (known after apply)
              + size        = (known after apply)
              + snapshot_id = (known after apply)
              + type        = "network-hdd"
            }
        }

      + metadata_options (known after apply)

      + network_interface {
          + index          = (known after apply)
          + ip_address     = (known after apply)
          + ipv4           = true
          + ipv6           = (known after apply)
          + ipv6_address   = (known after apply)
          + mac_address    = (known after apply)
          + nat            = true
          + nat_ip_address = (known after apply)
          + nat_ip_version = (known after apply)
          + subnet_id      = "e2l3co6r10mp14ro4ff6"
        }

      + placement_policy (known after apply)

      + resources {
          + core_fraction = 20
          + cores         = 2
          + memory        = 2
        }

      + scheduling_policy {
          + preemptible = true
        }
    }

  # yandex_compute_instance.lemp[1] will be created
  + resource "yandex_compute_instance" "lemp" {
      + created_at                = (known after apply)
      + folder_id                 = (known after apply)
      + fqdn                      = (known after apply)
      + gpu_cluster_id            = (known after apply)
      + hardware_generation       = (known after apply)
      + hostname                  = (known after apply)
      + id                        = (known after apply)
      + maintenance_grace_period  = (known after apply)
      + maintenance_policy        = (known after apply)
      + metadata                  = {
          + "ssh-keys" = (sensitive value)
        }
      + name                      = "les01-backend-lemp-2"
      + network_acceleration_type = "standard"
      + platform_id               = "standard-v1"
      + status                    = (known after apply)
      + zone                      = "ru-central1-a"

      + boot_disk {
          + auto_delete = true
          + device_name = (known after apply)
          + disk_id     = (known after apply)
          + mode        = (known after apply)

          + initialize_params {
              + block_size  = (known after apply)
              + description = (known after apply)
              + image_id    = "fd89eh9ba36b7cggtan6"
              + name        = (known after apply)
              + size        = (known after apply)
              + snapshot_id = (known after apply)
              + type        = "network-hdd"
            }
        }

      + metadata_options (known after apply)

      + network_interface {
          + index          = (known after apply)
          + ip_address     = (known after apply)
          + ipv4           = true
          + ipv6           = (known after apply)
          + ipv6_address   = (known after apply)
          + mac_address    = (known after apply)
          + nat            = true
          + nat_ip_address = (known after apply)
          + nat_ip_version = (known after apply)
          + subnet_id      = "e9bop98iu12teftg4uj8"
        }

      + placement_policy (known after apply)

      + resources {
          + core_fraction = 20
          + cores         = 2
          + memory        = 2
        }

      + scheduling_policy {
          + preemptible = true
        }
    }

  # yandex_compute_instance.lemp[2] will be created
  + resource "yandex_compute_instance" "lemp" {
      + created_at                = (known after apply)
      + folder_id                 = (known after apply)
      + fqdn                      = (known after apply)
      + gpu_cluster_id            = (known after apply)
      + hardware_generation       = (known after apply)
      + hostname                  = (known after apply)
      + id                        = (known after apply)
      + maintenance_grace_period  = (known after apply)
      + maintenance_policy        = (known after apply)
      + metadata                  = {
          + "ssh-keys" = (sensitive value)
        }
      + name                      = "les01-backend-lemp-3"
      + network_acceleration_type = "standard"
      + platform_id               = "standard-v2"
      + status                    = (known after apply)
      + zone                      = "ru-central1-d"

      + boot_disk {
          + auto_delete = true
          + device_name = (known after apply)
          + disk_id     = (known after apply)
          + mode        = (known after apply)

          + initialize_params {
              + block_size  = (known after apply)
              + description = (known after apply)
              + image_id    = "fd89eh9ba36b7cggtan6"
              + name        = (known after apply)
              + size        = (known after apply)
              + snapshot_id = (known after apply)
              + type        = "network-hdd"
            }
        }

      + metadata_options (known after apply)

      + network_interface {
          + index          = (known after apply)
          + ip_address     = (known after apply)
          + ipv4           = true
          + ipv6           = (known after apply)
          + ipv6_address   = (known after apply)
          + mac_address    = (known after apply)
          + nat            = true
          + nat_ip_address = (known after apply)
          + nat_ip_version = (known after apply)
          + subnet_id      = "fl8n8apm16arg05hh4k3"
        }

      + placement_policy (known after apply)

      + resources {
          + core_fraction = 20
          + cores         = 2
          + memory        = 2
        }

      + scheduling_policy {
          + preemptible = true
        }
    }

  # yandex_lb_network_load_balancer.nlb will be created
  + resource "yandex_lb_network_load_balancer" "nlb" {
      + allow_zonal_shift   = (known after apply)
      + created_at          = (known after apply)
      + deletion_protection = (known after apply)
      + folder_id           = (known after apply)
      + id                  = (known after apply)
      + name                = "les01-nlb"
      + region_id           = (known after apply)
      + type                = "external"

      + attached_target_group {
          + target_group_id = (known after apply)

          + healthcheck {
              + healthy_threshold   = 2
              + interval            = 2
              + name                = "http"
              + timeout             = 1
              + unhealthy_threshold = 2

              + http_options {
                  + path = "/"
                  + port = 80
                }
            }
        }

      + listener {
          + name        = "les01-listener"
          + port        = 80
          + protocol    = (known after apply)
          + target_port = (known after apply)

          + external_address_spec {
              + address    = (known after apply)
              + ip_version = "ipv4"
            }
        }
    }

  # yandex_lb_target_group.tg will be created
  + resource "yandex_lb_target_group" "tg" {
      + created_at      = (known after apply)
      + description     = (known after apply)
      + folder_id       = (known after apply)
      + id              = (known after apply)
      + labels          = (known after apply)
      + name            = "les01-tg"
      + region_id       = (known after apply)
      + target_group_id = (known after apply)

      + target {
          + address   = (known after apply)
          + subnet_id = "e2l3co6r10mp14ro4ff6"
        }
      + target {
          + address   = (known after apply)
          + subnet_id = "e9bop98iu12teftg4uj8"
        }
      + target {
          + address   = (known after apply)
          + subnet_id = "fl8n8apm16arg05hh4k3"
        }
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance_names       = [
      + "les01-backend-lemp-1",
      + "les01-backend-lemp-2",
      + "les01-backend-lemp-3",
    ]
  + instance_nat_ips     = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]
  + instance_platform    = [
      + "standard-v1",
      + "standard-v1",
      + "standard-v2",
    ]
  + instance_private_ips = [
      + (known after apply),
      + (known after apply),
      + (known after apply),
    ]
  + instance_zones       = [
      + "ru-central1-b",
      + "ru-central1-a",
      + "ru-central1-d",
    ]
  + nlb_external_ip      = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

yandex_compute_instance.lemp[2]: Creating...
yandex_compute_instance.lemp[1]: Creating...
yandex_compute_instance.lemp[0]: Creating...
yandex_compute_instance.lemp[2]: Still creating... [00m10s elapsed]
yandex_compute_instance.lemp[1]: Still creating... [00m10s elapsed]
yandex_compute_instance.lemp[0]: Still creating... [00m10s elapsed]
yandex_compute_instance.lemp[1]: Still creating... [00m20s elapsed]
yandex_compute_instance.lemp[2]: Still creating... [00m20s elapsed]
yandex_compute_instance.lemp[0]: Still creating... [00m20s elapsed]
yandex_compute_instance.lemp[2]: Still creating... [00m30s elapsed]
yandex_compute_instance.lemp[1]: Still creating... [00m30s elapsed]
yandex_compute_instance.lemp[0]: Still creating... [00m30s elapsed]
yandex_compute_instance.lemp[1]: Provisioning with 'file'...
yandex_compute_instance.lemp[2]: Provisioning with 'file'...
yandex_compute_instance.lemp[0]: Provisioning with 'file'...
yandex_compute_instance.lemp[2]: Still creating... [00m40s elapsed]
yandex_compute_instance.lemp[1]: Still creating... [00m40s elapsed]
yandex_compute_instance.lemp[0]: Still creating... [00m40s elapsed]
yandex_compute_instance.lemp[1]: Still creating... [00m50s elapsed]
yandex_compute_instance.lemp[2]: Still creating... [00m50s elapsed]
yandex_compute_instance.lemp[0]: Still creating... [00m50s elapsed]
yandex_compute_instance.lemp[2]: Provisioning with 'remote-exec'...
yandex_compute_instance.lemp[2] (remote-exec): Connecting to remote host via SSH...
yandex_compute_instance.lemp[2] (remote-exec):   Host: 158.160.195.64
yandex_compute_instance.lemp[2] (remote-exec):   User: ubuntu
yandex_compute_instance.lemp[2] (remote-exec):   Password: false
yandex_compute_instance.lemp[2] (remote-exec):   Private key: true
yandex_compute_instance.lemp[2] (remote-exec):   Certificate: false
yandex_compute_instance.lemp[2] (remote-exec):   SSH Agent: true
yandex_compute_instance.lemp[2] (remote-exec):   Checking Host Key: false
yandex_compute_instance.lemp[2] (remote-exec):   Target Platform: unix
yandex_compute_instance.lemp[2] (remote-exec): Connected!
yandex_compute_instance.lemp[2]: Creation complete after 53s [id=fv49abur4old3k40khb7]
yandex_compute_instance.lemp[1]: Still creating... [01m00s elapsed]
yandex_compute_instance.lemp[0]: Still creating... [01m00s elapsed]
yandex_compute_instance.lemp[1]: Provisioning with 'remote-exec'...
yandex_compute_instance.lemp[1] (remote-exec): Connecting to remote host via SSH...
yandex_compute_instance.lemp[1] (remote-exec):   Host: 158.160.60.190
yandex_compute_instance.lemp[1] (remote-exec):   User: ubuntu
yandex_compute_instance.lemp[1] (remote-exec):   Password: false
yandex_compute_instance.lemp[1] (remote-exec):   Private key: true
yandex_compute_instance.lemp[1] (remote-exec):   Certificate: false
yandex_compute_instance.lemp[1] (remote-exec):   SSH Agent: true
yandex_compute_instance.lemp[1] (remote-exec):   Checking Host Key: false
yandex_compute_instance.lemp[1] (remote-exec):   Target Platform: unix
yandex_compute_instance.lemp[1] (remote-exec): Connected!
yandex_compute_instance.lemp[1]: Creation complete after 1m9s [id=fhmmvh5su24105sbcc47]
yandex_compute_instance.lemp[0]: Still creating... [01m10s elapsed]
yandex_compute_instance.lemp[0]: Provisioning with 'remote-exec'...
yandex_compute_instance.lemp[0] (remote-exec): Connecting to remote host via SSH...
yandex_compute_instance.lemp[0] (remote-exec):   Host: 89.169.174.82
yandex_compute_instance.lemp[0] (remote-exec):   User: ubuntu
yandex_compute_instance.lemp[0] (remote-exec):   Password: false
yandex_compute_instance.lemp[0] (remote-exec):   Private key: true
yandex_compute_instance.lemp[0] (remote-exec):   Certificate: false
yandex_compute_instance.lemp[0] (remote-exec):   SSH Agent: true
yandex_compute_instance.lemp[0] (remote-exec):   Checking Host Key: false
yandex_compute_instance.lemp[0] (remote-exec):   Target Platform: unix
yandex_compute_instance.lemp[0] (remote-exec): Connected!
yandex_compute_instance.lemp[0]: Creation complete after 1m15s [id=epdcg8pjlt2kf6utj8ie]
yandex_lb_target_group.tg: Creating...
yandex_lb_target_group.tg: Creation complete after 2s [id=enp7u8su0vl5gi1sqbo5]
yandex_lb_network_load_balancer.nlb: Creating...
yandex_lb_network_load_balancer.nlb: Creation complete after 4s [id=enpeo9mvsvq4ggtst97l]

Apply complete! Resources: 5 added, 0 changed, 0 destroyed.

Outputs:

instance_names = [
  "les01-backend-lemp-1",
  "les01-backend-lemp-2",
  "les01-backend-lemp-3",
]
instance_nat_ips = [
  "89.169.174.82",
  "158.160.60.190",
  "158.160.195.64",
]
instance_platform = [
  "standard-v1",
  "standard-v1",
  "standard-v2",
]
instance_private_ips = [
  "10.129.0.7",
  "10.128.0.28",
  "10.131.0.32",
]
instance_zones = [
  "ru-central1-b",
  "ru-central1-a",
  "ru-central1-d",
]
nlb_external_ip = "84.252.135.252"
+++ terraform output -json instance_nat_ips
++ ips_json='["89.169.174.82","158.160.60.190","158.160.195.64"]'
+++ terraform output -raw nlb_external_ip
++ nlb_ip=84.252.135.252
++ true
++ echo '["89.169.174.82","158.160.60.190","158.160.195.64"]'
++ jq -r '.[]'
++ read -r ip
++ echo 'Instance with ip=89.169.174.82:'
Instance with ip=89.169.174.82:
++ curl -sS http://89.169.174.82
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-1</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-1</h1>
    <p>Private IP: 10.129.0.7</p>
    <p>NAT IP: 89.169.174.82</p>
  </body>
</html>++ read -r ip
++ echo 'Instance with ip=158.160.60.190:'
Instance with ip=158.160.60.190:
++ curl -sS http://158.160.60.190
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-2</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-2</h1>
    <p>Private IP: 10.128.0.28</p>
    <p>NAT IP: 158.160.60.190</p>
  </body>
</html>++ read -r ip
++ echo 'Instance with ip=158.160.195.64:'
Instance with ip=158.160.195.64:
++ curl -sS http://158.160.195.64
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-3</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-3</h1>
    <p>Private IP: 10.131.0.32</p>
    <p>NAT IP: 158.160.195.64</p>
  </body>
</html>++ read -r ip
++ echo 'Network Load Balancer with ip=84.252.135.252:'
Network Load Balancer with ip=84.252.135.252:
++ curl -sS http://84.252.135.252
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-2</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-2</h1>
    <p>Private IP: 10.128.0.28</p>
    <p>NAT IP: 158.160.60.190</p>
  </body>
</html>++ read -r -n1 -p 'Press Y to destroy or any key to wait: ' ans
Press Y to destroy or any key to wait: 
++ echo

++ [[ '' == \Y ]]
++ sleep 1
++ true
++ echo '["89.169.174.82","158.160.60.190","158.160.195.64"]'
++ jq -r '.[]'
++ read -r ip
++ echo 'Instance with ip=89.169.174.82:'
Instance with ip=89.169.174.82:
++ curl -sS http://89.169.174.82
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-1</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-1</h1>
    <p>Private IP: 10.129.0.7</p>
    <p>NAT IP: 89.169.174.82</p>
  </body>
</html>++ read -r ip
++ echo 'Instance with ip=158.160.60.190:'
Instance with ip=158.160.60.190:
++ curl -sS http://158.160.60.190
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-2</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-2</h1>
    <p>Private IP: 10.128.0.28</p>
    <p>NAT IP: 158.160.60.190</p>
  </body>
</html>++ read -r ip
++ echo 'Instance with ip=158.160.195.64:'
Instance with ip=158.160.195.64:
++ curl -sS http://158.160.195.64
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-3</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-3</h1>
    <p>Private IP: 10.131.0.32</p>
    <p>NAT IP: 158.160.195.64</p>
  </body>
</html>++ read -r ip
++ echo 'Network Load Balancer with ip=84.252.135.252:'
Network Load Balancer with ip=84.252.135.252:
++ curl -sS http://84.252.135.252
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-3</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-3</h1>
    <p>Private IP: 10.131.0.32</p>
    <p>NAT IP: 158.160.195.64</p>
  </body>
</html>++ read -r -n1 -p 'Press Y to destroy or any key to wait: ' ans
Press Y to destroy or any key to wait: 
++ echo

++ [[ '' == \Y ]]
++ sleep 1
++ true
++ echo '["89.169.174.82","158.160.60.190","158.160.195.64"]'
++ jq -r '.[]'
++ read -r ip
++ echo 'Instance with ip=89.169.174.82:'
Instance with ip=89.169.174.82:
++ curl -sS http://89.169.174.82
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-1</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-1</h1>
    <p>Private IP: 10.129.0.7</p>
    <p>NAT IP: 89.169.174.82</p>
  </body>
</html>++ read -r ip
++ echo 'Instance with ip=158.160.60.190:'
Instance with ip=158.160.60.190:
++ curl -sS http://158.160.60.190
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-2</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-2</h1>
    <p>Private IP: 10.128.0.28</p>
    <p>NAT IP: 158.160.60.190</p>
  </body>
</html>++ read -r ip
++ echo 'Instance with ip=158.160.195.64:'
Instance with ip=158.160.195.64:
++ curl -sS http://158.160.195.64
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-3</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-3</h1>
    <p>Private IP: 10.131.0.32</p>
    <p>NAT IP: 158.160.195.64</p>
  </body>
</html>++ read -r ip
++ echo 'Network Load Balancer with ip=84.252.135.252:'
Network Load Balancer with ip=84.252.135.252:
++ curl -sS http://84.252.135.252
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-2</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-2</h1>
    <p>Private IP: 10.128.0.28</p>
    <p>NAT IP: 158.160.60.190</p>
  </body>
</html>++ read -r -n1 -p 'Press Y to destroy or any key to wait: ' ans
Press Y to destroy or any key to wait: 
++ echo

++ [[ '' == \Y ]]
++ sleep 1
++ true
++ echo '["89.169.174.82","158.160.60.190","158.160.195.64"]'
++ jq -r '.[]'
++ read -r ip
++ echo 'Instance with ip=89.169.174.82:'
Instance with ip=89.169.174.82:
++ curl -sS http://89.169.174.82
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-1</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-1</h1>
    <p>Private IP: 10.129.0.7</p>
    <p>NAT IP: 89.169.174.82</p>
  </body>
</html>++ read -r ip
++ echo 'Instance with ip=158.160.60.190:'
Instance with ip=158.160.60.190:
++ curl -sS http://158.160.60.190
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-2</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-2</h1>
    <p>Private IP: 10.128.0.28</p>
    <p>NAT IP: 158.160.60.190</p>
  </body>
</html>++ read -r ip
++ echo 'Instance with ip=158.160.195.64:'
Instance with ip=158.160.195.64:
++ curl -sS http://158.160.195.64
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-3</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-3</h1>
    <p>Private IP: 10.131.0.32</p>
    <p>NAT IP: 158.160.195.64</p>
  </body>
</html>++ read -r ip
++ echo 'Network Load Balancer with ip=84.252.135.252:'
Network Load Balancer with ip=84.252.135.252:
++ curl -sS http://84.252.135.252
<!doctype html>
<html>
  <head><meta charset="utf-8"><title>les01-backend-lemp-1</title></head>
  <body>
    <h1>Instance: les01-backend-lemp-1</h1>
    <p>Private IP: 10.129.0.7</p>
    <p>NAT IP: 89.169.174.82</p>
  </body>
</html>++ read -r -n1 -p 'Press Y to destroy or any key to wait: ' ans
Press Y to destroy or any key to wait: Y++ echo

++ [[ Y == \Y ]]
++ break
++ echo Destroying...
Destroying...
++ terraform destroy
data.yandex_vpc_network.default: Reading...
data.yandex_vpc_network.default: Read complete after 2s [id=enpjr0b65u0olvuotmdf]
data.yandex_vpc_subnet.by_id["e2l3co6r10mp14ro4ff6"]: Reading...
data.yandex_vpc_subnet.by_id["fl8n8apm16arg05hh4k3"]: Reading...
data.yandex_vpc_subnet.by_id["e9bop98iu12teftg4uj8"]: Reading...
data.yandex_vpc_subnet.by_id["e9bop98iu12teftg4uj8"]: Read complete after 6s [id=e9bop98iu12teftg4uj8]
data.yandex_vpc_subnet.by_id["fl8n8apm16arg05hh4k3"]: Read complete after 6s [id=fl8n8apm16arg05hh4k3]
data.yandex_vpc_subnet.by_id["e2l3co6r10mp14ro4ff6"]: Read complete after 6s [id=e2l3co6r10mp14ro4ff6]
yandex_compute_instance.lemp[1]: Refreshing state... [id=fhmmvh5su24105sbcc47]
yandex_compute_instance.lemp[2]: Refreshing state... [id=fv49abur4old3k40khb7]
yandex_compute_instance.lemp[0]: Refreshing state... [id=epdcg8pjlt2kf6utj8ie]
yandex_lb_target_group.tg: Refreshing state... [id=enp7u8su0vl5gi1sqbo5]
yandex_lb_network_load_balancer.nlb: Refreshing state... [id=enpeo9mvsvq4ggtst97l]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  - destroy

Terraform will perform the following actions:

  # yandex_compute_instance.lemp[0] will be destroyed
  - resource "yandex_compute_instance" "lemp" {
      - created_at                = "2025-10-28T04:14:12Z" -> null
      - folder_id                 = "b1gmesrdjgklgkvcp704" -> null
      - fqdn                      = "epdcg8pjlt2kf6utj8ie.auto.internal" -> null
      - hardware_generation       = [
          - {
              - generation2_features = []
              - legacy_features      = [
                  - {
                      - pci_topology = "PCI_TOPOLOGY_V1"
                    },
                ]
            },
        ] -> null
      - id                        = "epdcg8pjlt2kf6utj8ie" -> null
      - labels                    = {} -> null
      - metadata                  = {
          - "ssh-keys" = (sensitive value)
        } -> null
      - name                      = "les01-backend-lemp-1" -> null
      - network_acceleration_type = "standard" -> null
      - platform_id               = "standard-v1" -> null
      - status                    = "running" -> null
      - zone                      = "ru-central1-b" -> null
        # (5 unchanged attributes hidden)

      - boot_disk {
          - auto_delete = true -> null
          - device_name = "epde0pcr0mjgia3hgsn1" -> null
          - disk_id     = "epde0pcr0mjgia3hgsn1" -> null
          - mode        = "READ_WRITE" -> null

          - initialize_params {
              - block_size  = 4096 -> null
              - image_id    = "fd89eh9ba36b7cggtan6" -> null
                name        = null
              - size        = 3 -> null
              - type        = "network-hdd" -> null
                # (3 unchanged attributes hidden)
            }
        }

      - metadata_options {
          - aws_v1_http_endpoint = 1 -> null
          - aws_v1_http_token    = 2 -> null
          - gce_http_endpoint    = 1 -> null
          - gce_http_token       = 1 -> null
        }

      - network_interface {
          - index              = 0 -> null
          - ip_address         = "10.129.0.7" -> null
          - ipv4               = true -> null
          - ipv6               = false -> null
          - mac_address        = "d0:0d:c8:23:33:af" -> null
          - nat                = true -> null
          - nat_ip_address     = "89.169.174.82" -> null
          - nat_ip_version     = "IPV4" -> null
          - security_group_ids = [] -> null
          - subnet_id          = "e2l3co6r10mp14ro4ff6" -> null
            # (1 unchanged attribute hidden)
        }

      - placement_policy {
          - host_affinity_rules       = [] -> null
          - placement_group_partition = 0 -> null
            # (1 unchanged attribute hidden)
        }

      - resources {
          - core_fraction = 20 -> null
          - cores         = 2 -> null
          - gpus          = 0 -> null
          - memory        = 2 -> null
        }

      - scheduling_policy {
          - preemptible = true -> null
        }
    }

  # yandex_compute_instance.lemp[1] will be destroyed
  - resource "yandex_compute_instance" "lemp" {
      - created_at                = "2025-10-28T04:14:12Z" -> null
      - folder_id                 = "b1gmesrdjgklgkvcp704" -> null
      - fqdn                      = "fhmmvh5su24105sbcc47.auto.internal" -> null
      - hardware_generation       = [
          - {
              - generation2_features = []
              - legacy_features      = [
                  - {
                      - pci_topology = "PCI_TOPOLOGY_V1"
                    },
                ]
            },
        ] -> null
      - id                        = "fhmmvh5su24105sbcc47" -> null
      - labels                    = {} -> null
      - metadata                  = {
          - "ssh-keys" = (sensitive value)
        } -> null
      - name                      = "les01-backend-lemp-2" -> null
      - network_acceleration_type = "standard" -> null
      - platform_id               = "standard-v1" -> null
      - status                    = "running" -> null
      - zone                      = "ru-central1-a" -> null
        # (5 unchanged attributes hidden)

      - boot_disk {
          - auto_delete = true -> null
          - device_name = "fhm0km5tpnsiauqehvbl" -> null
          - disk_id     = "fhm0km5tpnsiauqehvbl" -> null
          - mode        = "READ_WRITE" -> null

          - initialize_params {
              - block_size  = 4096 -> null
              - image_id    = "fd89eh9ba36b7cggtan6" -> null
                name        = null
              - size        = 3 -> null
              - type        = "network-hdd" -> null
                # (3 unchanged attributes hidden)
            }
        }

      - metadata_options {
          - aws_v1_http_endpoint = 1 -> null
          - aws_v1_http_token    = 2 -> null
          - gce_http_endpoint    = 1 -> null
          - gce_http_token       = 1 -> null
        }

      - network_interface {
          - index              = 0 -> null
          - ip_address         = "10.128.0.28" -> null
          - ipv4               = true -> null
          - ipv6               = false -> null
          - mac_address        = "d0:0d:16:fc:4b:cf" -> null
          - nat                = true -> null
          - nat_ip_address     = "158.160.60.190" -> null
          - nat_ip_version     = "IPV4" -> null
          - security_group_ids = [] -> null
          - subnet_id          = "e9bop98iu12teftg4uj8" -> null
            # (1 unchanged attribute hidden)
        }

      - placement_policy {
          - host_affinity_rules       = [] -> null
          - placement_group_partition = 0 -> null
            # (1 unchanged attribute hidden)
        }

      - resources {
          - core_fraction = 20 -> null
          - cores         = 2 -> null
          - gpus          = 0 -> null
          - memory        = 2 -> null
        }

      - scheduling_policy {
          - preemptible = true -> null
        }
    }

  # yandex_compute_instance.lemp[2] will be destroyed
  - resource "yandex_compute_instance" "lemp" {
      - created_at                = "2025-10-28T04:14:12Z" -> null
      - folder_id                 = "b1gmesrdjgklgkvcp704" -> null
      - fqdn                      = "fv49abur4old3k40khb7.auto.internal" -> null
      - hardware_generation       = [
          - {
              - generation2_features = []
              - legacy_features      = [
                  - {
                      - pci_topology = "PCI_TOPOLOGY_V1"
                    },
                ]
            },
        ] -> null
      - id                        = "fv49abur4old3k40khb7" -> null
      - labels                    = {} -> null
      - metadata                  = {
          - "ssh-keys" = (sensitive value)
        } -> null
      - name                      = "les01-backend-lemp-3" -> null
      - network_acceleration_type = "standard" -> null
      - platform_id               = "standard-v2" -> null
      - status                    = "running" -> null
      - zone                      = "ru-central1-d" -> null
        # (5 unchanged attributes hidden)

      - boot_disk {
          - auto_delete = true -> null
          - device_name = "fv4ki5vi0irdl48te816" -> null
          - disk_id     = "fv4ki5vi0irdl48te816" -> null
          - mode        = "READ_WRITE" -> null

          - initialize_params {
              - block_size  = 4096 -> null
              - image_id    = "fd89eh9ba36b7cggtan6" -> null
                name        = null
              - size        = 3 -> null
              - type        = "network-hdd" -> null
                # (3 unchanged attributes hidden)
            }
        }

      - metadata_options {
          - aws_v1_http_endpoint = 1 -> null
          - aws_v1_http_token    = 2 -> null
          - gce_http_endpoint    = 1 -> null
          - gce_http_token       = 1 -> null
        }

      - network_interface {
          - index              = 0 -> null
          - ip_address         = "10.131.0.32" -> null
          - ipv4               = true -> null
          - ipv6               = false -> null
          - mac_address        = "d0:0d:95:2f:db:26" -> null
          - nat                = true -> null
          - nat_ip_address     = "158.160.195.64" -> null
          - nat_ip_version     = "IPV4" -> null
          - security_group_ids = [] -> null
          - subnet_id          = "fl8n8apm16arg05hh4k3" -> null
            # (1 unchanged attribute hidden)
        }

      - placement_policy {
          - host_affinity_rules       = [] -> null
          - placement_group_partition = 0 -> null
            # (1 unchanged attribute hidden)
        }

      - resources {
          - core_fraction = 20 -> null
          - cores         = 2 -> null
          - gpus          = 0 -> null
          - memory        = 2 -> null
        }

      - scheduling_policy {
          - preemptible = true -> null
        }
    }

  # yandex_lb_network_load_balancer.nlb will be destroyed
  - resource "yandex_lb_network_load_balancer" "nlb" {
      - allow_zonal_shift   = false -> null
      - created_at          = "2025-10-28T04:15:28Z" -> null
      - deletion_protection = false -> null
      - folder_id           = "b1gmesrdjgklgkvcp704" -> null
      - id                  = "enpeo9mvsvq4ggtst97l" -> null
      - labels              = {} -> null
      - name                = "les01-nlb" -> null
      - region_id           = "ru-central1" -> null
      - type                = "external" -> null
        # (1 unchanged attribute hidden)

      - attached_target_group {
          - target_group_id = "enp7u8su0vl5gi1sqbo5" -> null

          - healthcheck {
              - healthy_threshold   = 2 -> null
              - interval            = 2 -> null
              - name                = "http" -> null
              - timeout             = 1 -> null
              - unhealthy_threshold = 2 -> null

              - http_options {
                  - path = "/" -> null
                  - port = 80 -> null
                }
            }
        }

      - listener {
          - name        = "les01-listener" -> null
          - port        = 80 -> null
          - protocol    = "tcp" -> null
          - target_port = 80 -> null

          - external_address_spec {
              - address    = "84.252.135.252" -> null
              - ip_version = "ipv4" -> null
            }
        }
    }

  # yandex_lb_target_group.tg will be destroyed
  - resource "yandex_lb_target_group" "tg" {
      - created_at      = "2025-10-28T04:15:26Z" -> null
      - folder_id       = "b1gmesrdjgklgkvcp704" -> null
      - id              = "enp7u8su0vl5gi1sqbo5" -> null
      - name            = "les01-tg" -> null
      - region_id       = "ru-central1" -> null
      - target_group_id = "enp7u8su0vl5gi1sqbo5" -> null
        # (1 unchanged attribute hidden)

      - target {
          - address   = "10.128.0.28" -> null
          - subnet_id = "e9bop98iu12teftg4uj8" -> null
        }
      - target {
          - address   = "10.129.0.7" -> null
          - subnet_id = "e2l3co6r10mp14ro4ff6" -> null
        }
      - target {
          - address   = "10.131.0.32" -> null
          - subnet_id = "fl8n8apm16arg05hh4k3" -> null
        }
    }

Plan: 0 to add, 0 to change, 5 to destroy.

Changes to Outputs:
  - instance_names       = [
      - "les01-backend-lemp-1",
      - "les01-backend-lemp-2",
      - "les01-backend-lemp-3",
    ] -> null
  - instance_nat_ips     = [
      - "89.169.174.82",
      - "158.160.60.190",
      - "158.160.195.64",
    ] -> null
  - instance_platform    = [
      - "standard-v1",
      - "standard-v1",
      - "standard-v2",
    ] -> null
  - instance_private_ips = [
      - "10.129.0.7",
      - "10.128.0.28",
      - "10.131.0.32",
    ] -> null
  - instance_zones       = [
      - "ru-central1-b",
      - "ru-central1-a",
      - "ru-central1-d",
    ] -> null
  - nlb_external_ip      = "84.252.135.252" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

yandex_lb_network_load_balancer.nlb: Destroying... [id=enpeo9mvsvq4ggtst97l]
yandex_lb_network_load_balancer.nlb: Destruction complete after 4s
yandex_lb_target_group.tg: Destroying... [id=enp7u8su0vl5gi1sqbo5]
yandex_lb_target_group.tg: Destruction complete after 6s
yandex_compute_instance.lemp[0]: Destroying... [id=epdcg8pjlt2kf6utj8ie]
yandex_compute_instance.lemp[1]: Destroying... [id=fhmmvh5su24105sbcc47]
yandex_compute_instance.lemp[2]: Destroying... [id=fv49abur4old3k40khb7]
yandex_compute_instance.lemp[0]: Still destroying... [id=epdcg8pjlt2kf6utj8ie, 00m10s elapsed]
yandex_compute_instance.lemp[1]: Still destroying... [id=fhmmvh5su24105sbcc47, 00m10s elapsed]
yandex_compute_instance.lemp[2]: Still destroying... [id=fv49abur4old3k40khb7, 00m10s elapsed]
yandex_compute_instance.lemp[0]: Still destroying... [id=epdcg8pjlt2kf6utj8ie, 00m20s elapsed]
yandex_compute_instance.lemp[1]: Still destroying... [id=fhmmvh5su24105sbcc47, 00m20s elapsed]
yandex_compute_instance.lemp[2]: Still destroying... [id=fv49abur4old3k40khb7, 00m20s elapsed]
yandex_compute_instance.lemp[0]: Still destroying... [id=epdcg8pjlt2kf6utj8ie, 00m30s elapsed]
yandex_compute_instance.lemp[1]: Still destroying... [id=fhmmvh5su24105sbcc47, 00m30s elapsed]
yandex_compute_instance.lemp[2]: Still destroying... [id=fv49abur4old3k40khb7, 00m30s elapsed]
yandex_compute_instance.lemp[2]: Destruction complete after 32s
yandex_compute_instance.lemp[1]: Destruction complete after 35s
yandex_compute_instance.lemp[0]: Still destroying... [id=epdcg8pjlt2kf6utj8ie, 00m40s elapsed]
yandex_compute_instance.lemp[0]: Still destroying... [id=epdcg8pjlt2kf6utj8ie, 00m50s elapsed]
yandex_compute_instance.lemp[0]: Destruction complete after 53s

Destroy complete! Resources: 5 destroyed.
++ set +x
