aleksey@first:~/OtusTeam/IaC/les04/lifecycle$ tf apply
data.yandex_compute_image.ubuntu_image: Reading...
data.yandex_compute_image.ubuntu_image: Read complete after 0s [id=fd8oleakvidnd7jg6b5d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # yandex_compute_instance.les04_db will be created
  + resource "yandex_compute_instance" "les04_db" {
      + created_at                = (known after apply)
      + folder_id                 = (known after apply)
      + fqdn                      = (known after apply)
      + gpu_cluster_id            = (known after apply)
      + hostname                  = (known after apply)
      + id                        = (known after apply)
      + maintenance_grace_period  = (known after apply)
      + maintenance_policy        = (known after apply)
      + metadata                  = {
          + "ssh-keys" = (sensitive value)
        }
      + name                      = "les04-db"
      + network_acceleration_type = "standard"
      + platform_id               = "standard-v1"
      + service_account_id        = (known after apply)
      + status                    = (known after apply)
      + zone                      = (known after apply)

      + boot_disk {
          + auto_delete = true
          + device_name = (known after apply)
          + disk_id     = (known after apply)
          + mode        = (known after apply)

          + initialize_params {
              + block_size  = (known after apply)
              + description = (known after apply)
              + image_id    = "fd8oleakvidnd7jg6b5d"
              + name        = (known after apply)
              + size        = (known after apply)
              + snapshot_id = (known after apply)
              + type        = "network-hdd"
            }
        }

      + network_interface {
          + index              = (known after apply)
          + ip_address         = (known after apply)
          + ipv4               = true
          + ipv6               = (known after apply)
          + ipv6_address       = (known after apply)
          + mac_address        = (known after apply)
          + nat                = true
          + nat_ip_address     = (known after apply)
          + nat_ip_version     = (known after apply)
          + security_group_ids = (known after apply)
          + subnet_id          = "e9bop98iu12teftg4uj8"
        }

      + resources {
          + core_fraction = 20
          + cores         = 2
          + memory        = 2
        }

      + scheduling_policy {
          + preemptible = true
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + public_ip = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

yandex_compute_instance.les04_db: Creating...
yandex_compute_instance.les04_db: Still creating... [10s elapsed]
yandex_compute_instance.les04_db: Still creating... [20s elapsed]
yandex_compute_instance.les04_db: Creation complete after 29s [id=fhm7jgv7ftbrs7ornnhn]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

public_ip = "158.160.52.8"
aleksey@first:~/OtusTeam/IaC/les04/lifecycle$ tf destroy
data.yandex_compute_image.ubuntu_image: Reading...
data.yandex_compute_image.ubuntu_image: Read complete after 0s [id=fd8oleakvidnd7jg6b5d]
yandex_compute_instance.les04_db: Refreshing state... [id=fhm7jgv7ftbrs7ornnhn]

Changes to Outputs:
  - public_ip = "158.160.52.8" -> null

You can apply this plan to save these new output values to the Terraform state, without changing any real infrastructure.
╷
│ Error: Instance cannot be destroyed
│ 
│   on main.tf line 1:
│    1: resource "yandex_compute_instance" "les04_db" {
│ 
│ Resource yandex_compute_instance.les04_db has lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed. To
│ avoid this error and continue with the plan, either disable lifecycle.prevent_destroy or reduce the scope of the plan using the
│ -target flag.
╵
aleksey@first:~/OtusTeam/IaC/les04/lifecycle$ nano main.tf 
aleksey@first:~/OtusTeam/IaC/les04/lifecycle$ tf destroy
data.yandex_compute_image.ubuntu_image: Reading...
data.yandex_compute_image.ubuntu_image: Read complete after 0s [id=fd8oleakvidnd7jg6b5d]
yandex_compute_instance.les04_db: Refreshing state... [id=fhm7jgv7ftbrs7ornnhn]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  - destroy

Terraform will perform the following actions:

  # yandex_compute_instance.les04_db will be destroyed
  - resource "yandex_compute_instance" "les04_db" {
      - created_at                = "2024-07-10T10:01:50Z" -> null
      - folder_id                 = "b1gmesrdjgklgkvcp704" -> null
      - fqdn                      = "fhm7jgv7ftbrs7ornnhn.auto.internal" -> null
      - id                        = "fhm7jgv7ftbrs7ornnhn" -> null
      - labels                    = {} -> null
      - metadata                  = {
          - "ssh-keys" = (sensitive value)
        } -> null
      - name                      = "les04-db" -> null
      - network_acceleration_type = "standard" -> null
      - platform_id               = "standard-v1" -> null
      - status                    = "running" -> null
      - zone                      = "ru-central1-a" -> null

      - boot_disk {
          - auto_delete = true -> null
          - device_name = "fhmelm3hsmlmhsegejg9" -> null
          - disk_id     = "fhmelm3hsmlmhsegejg9" -> null
          - mode        = "READ_WRITE" -> null

          - initialize_params {
              - block_size = 4096 -> null
              - image_id   = "fd8oleakvidnd7jg6b5d" -> null
              - size       = 8 -> null
              - type       = "network-hdd" -> null
            }
        }

      - metadata_options {
          - aws_v1_http_endpoint = 1 -> null
          - aws_v1_http_token    = 2 -> null
          - gce_http_endpoint    = 1 -> null
          - gce_http_token       = 1 -> null
        }

      - network_interface {
          - index              = 0 -> null
          - ip_address         = "10.128.0.8" -> null
          - ipv4               = true -> null
          - ipv6               = false -> null
          - mac_address        = "d0:0d:79:c3:e7:7f" -> null
          - nat                = true -> null
          - nat_ip_address     = "158.160.52.8" -> null
          - nat_ip_version     = "IPV4" -> null
          - security_group_ids = [] -> null
          - subnet_id          = "e9bop98iu12teftg4uj8" -> null
        }

      - placement_policy {
          - host_affinity_rules       = [] -> null
          - placement_group_partition = 0 -> null
        }

      - resources {
          - core_fraction = 20 -> null
          - cores         = 2 -> null
          - gpus          = 0 -> null
          - memory        = 2 -> null
        }

      - scheduling_policy {
          - preemptible = true -> null
        }
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Changes to Outputs:
  - public_ip = "158.160.52.8" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

yandex_compute_instance.les04_db: Destroying... [id=fhm7jgv7ftbrs7ornnhn]
yandex_compute_instance.les04_db: Still destroying... [id=fhm7jgv7ftbrs7ornnhn, 10s elapsed]
yandex_compute_instance.les04_db: Still destroying... [id=fhm7jgv7ftbrs7ornnhn, 20s elapsed]
yandex_compute_instance.les04_db: Still destroying... [id=fhm7jgv7ftbrs7ornnhn, 30s elapsed]
yandex_compute_instance.les04_db: Still destroying... [id=fhm7jgv7ftbrs7ornnhn, 40s elapsed]
yandex_compute_instance.les04_db: Destruction complete after 49s

Destroy complete! Resources: 1 destroyed.
aleksey@first:~/OtusTeam/IaC/les04/lifecycle$ nano main.tf 
aleksey@first:~/OtusTeam/IaC/les04/lifecycle$ tf validate
Success! The configuration is valid.

aleksey@first:~/OtusTeam/IaC/les04/lifecycle$ tf apply
data.yandex_compute_image.ubuntu_image: Reading...
data.yandex_compute_image.ubuntu_image: Read complete after 0s [id=fd8oleakvidnd7jg6b5d]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # yandex_compute_instance.les04_db will be created
  + resource "yandex_compute_instance" "les04_db" {
      + created_at                = (known after apply)
      + folder_id                 = (known after apply)
      + fqdn                      = (known after apply)
      + gpu_cluster_id            = (known after apply)
      + hostname                  = (known after apply)
      + id                        = (known after apply)
      + maintenance_grace_period  = (known after apply)
      + maintenance_policy        = (known after apply)
      + metadata                  = {
          + "ssh-keys" = (sensitive value)
        }
      + name                      = "les04-db"
      + network_acceleration_type = "standard"
      + platform_id               = "standard-v1"
      + service_account_id        = (known after apply)
      + status                    = (known after apply)
      + zone                      = (known after apply)

      + boot_disk {
          + auto_delete = true
          + device_name = (known after apply)
          + disk_id     = (known after apply)
          + mode        = (known after apply)

          + initialize_params {
              + block_size  = (known after apply)
              + description = (known after apply)
              + image_id    = "fd8oleakvidnd7jg6b5d"
              + name        = (known after apply)
              + size        = (known after apply)
              + snapshot_id = (known after apply)
              + type        = "network-hdd"
            }
        }

      + network_interface {
          + index              = (known after apply)
          + ip_address         = (known after apply)
          + ipv4               = true
          + ipv6               = (known after apply)
          + ipv6_address       = (known after apply)
          + mac_address        = (known after apply)
          + nat                = true
          + nat_ip_address     = (known after apply)
          + nat_ip_version     = (known after apply)
          + security_group_ids = (known after apply)
          + subnet_id          = "e9bop98iu12teftg4uj8"
        }

      + resources {
          + core_fraction = 20
          + cores         = 2
          + memory        = 2
        }

      + scheduling_policy {
          + preemptible = true
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + public_ip = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

yandex_compute_instance.les04_db: Creating...
yandex_compute_instance.les04_db: Still creating... [10s elapsed]
yandex_compute_instance.les04_db: Still creating... [20s elapsed]
yandex_compute_instance.les04_db: Still creating... [30s elapsed]
yandex_compute_instance.les04_db: Creation complete after 32s [id=fhm8akpt345tdstqvdjj]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

public_ip = "158.160.100.16"

aleksey@first:~/OtusTeam/IaC/les04/lifecycle$ nano ubuntu_image.tf 
aleksey@first:~/OtusTeam/IaC/les04/lifecycle$ tf apply
data.yandex_compute_image.ubuntu_image: Reading...
data.yandex_compute_image.ubuntu_image: Read complete after 0s [id=fd8oleakvidnd7jg6b5d]
yandex_compute_instance.les04_db: Refreshing state... [id=fhm8akpt345tdstqvdjj]

No changes. Your infrastructure matches the configuration.

Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.

Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

public_ip = "158.160.100.16"
aleksey@first:~/OtusTeam/IaC/les04/lifecycle$ nano main.tf 
aleksey@first:~/OtusTeam/IaC/les04/lifecycle$ tf destroy
data.yandex_compute_image.ubuntu_image: Reading...
data.yandex_compute_image.ubuntu_image: Read complete after 0s [id=fd8oleakvidnd7jg6b5d]
yandex_compute_instance.les04_db: Refreshing state... [id=fhm8akpt345tdstqvdjj]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  - destroy

Terraform will perform the following actions:

  # yandex_compute_instance.les04_db will be destroyed
  - resource "yandex_compute_instance" "les04_db" {
      - created_at                = "2024-07-10T10:15:23Z" -> null
      - folder_id                 = "b1gmesrdjgklgkvcp704" -> null
      - fqdn                      = "fhm8akpt345tdstqvdjj.auto.internal" -> null
      - id                        = "fhm8akpt345tdstqvdjj" -> null
      - labels                    = {} -> null
      - metadata                  = {
          - "ssh-keys" = (sensitive value)
        } -> null
      - name                      = "les04-db" -> null
      - network_acceleration_type = "standard" -> null
      - platform_id               = "standard-v1" -> null
      - status                    = "running" -> null
      - zone                      = "ru-central1-a" -> null

      - boot_disk {
          - auto_delete = true -> null
          - device_name = "fhmfnblo0jt4eeh0a3s7" -> null
          - disk_id     = "fhmfnblo0jt4eeh0a3s7" -> null
          - mode        = "READ_WRITE" -> null

          - initialize_params {
              - block_size = 4096 -> null
              - image_id   = "fd8oleakvidnd7jg6b5d" -> null
              - size       = 8 -> null
              - type       = "network-hdd" -> null
            }
        }

      - metadata_options {
          - aws_v1_http_endpoint = 1 -> null
          - aws_v1_http_token    = 2 -> null
          - gce_http_endpoint    = 1 -> null
          - gce_http_token       = 1 -> null
        }

      - network_interface {
          - index              = 0 -> null
          - ip_address         = "10.128.0.27" -> null
          - ipv4               = true -> null
          - ipv6               = false -> null
          - mac_address        = "d0:0d:85:53:3d:19" -> null
          - nat                = true -> null
          - nat_ip_address     = "158.160.100.16" -> null
          - nat_ip_version     = "IPV4" -> null
          - security_group_ids = [] -> null
          - subnet_id          = "e9bop98iu12teftg4uj8" -> null
        }

      - placement_policy {
          - host_affinity_rules       = [] -> null
          - placement_group_partition = 0 -> null
        }

      - resources {
          - core_fraction = 20 -> null
          - cores         = 2 -> null
          - gpus          = 0 -> null
          - memory        = 2 -> null
        }

      - scheduling_policy {
          - preemptible = true -> null
        }
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Changes to Outputs:
  - public_ip = "158.160.100.16" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

yandex_compute_instance.les04_db: Destroying... [id=fhm8akpt345tdstqvdjj]
yandex_compute_instance.les04_db: Still destroying... [id=fhm8akpt345tdstqvdjj, 10s elapsed]
yandex_compute_instance.les04_db: Still destroying... [id=fhm8akpt345tdstqvdjj, 20s elapsed]
yandex_compute_instance.les04_db: Still destroying... [id=fhm8akpt345tdstqvdjj, 30s elapsed]
yandex_compute_instance.les04_db: Still destroying... [id=fhm8akpt345tdstqvdjj, 40s elapsed]
yandex_compute_instance.les04_db: Still destroying... [id=fhm8akpt345tdstqvdjj, 50s elapsed]
yandex_compute_instance.les04_db: Destruction complete after 53s

Destroy complete! Resources: 1 destroyed.

