aleksey@first:~/OtusTeam/IaC/les05/terraform/answers$ tf init

Initializing the backend...

Initializing provider plugins...
- Finding yandex-cloud/yandex versions matching "> 0.8.0"...
- Finding latest version of hashicorp/null...
- Installing yandex-cloud/yandex v0.123.0...
- Installed yandex-cloud/yandex v0.123.0 (unauthenticated)
- Installing hashicorp/null v3.2.2...
- Installed hashicorp/null v3.2.2 (unauthenticated)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

╷
│ Warning: Incomplete lock file information for providers
│ 
│ Due to your customized provider installation methods, Terraform was forced to calculate lock file checksums
│ locally for the following providers:
│   - hashicorp/null
│   - yandex-cloud/yandex
│ 
│ The current .terraform.lock.hcl file only includes checksums for linux_amd64, so Terraform running on another
│ platform will fail to install these providers.
│ 
│ To calculate additional checksums for another platform, run:
│   terraform providers lock -platform=linux_amd64
│ (where linux_amd64 is the platform to generate)
╵

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
aleksey@first:~/OtusTeam/IaC/les05/terraform/answers$ tf validate
Success! The configuration is valid.

aleksey@first:~/OtusTeam/IaC/les05/terraform/answers$ tf apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated
with the following symbols:
  + create

Terraform will perform the following actions:

  # null_resource.example will be created
  + resource "null_resource" "example" {
      + id = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

null_resource.example: Creating...
null_resource.example: Provisioning with 'file'...
null_resource.example: Provisioning with 'remote-exec'...
null_resource.example (remote-exec): Connecting to remote host via SSH...
null_resource.example (remote-exec):   Host: 158.160.127.247
null_resource.example (remote-exec):   User: ubuntu
null_resource.example (remote-exec):   Password: false
null_resource.example (remote-exec):   Private key: true
null_resource.example (remote-exec):   Certificate: false
null_resource.example (remote-exec):   SSH Agent: false
null_resource.example (remote-exec):   Checking Host Key: false
null_resource.example (remote-exec):   Target Platform: unix
null_resource.example (remote-exec): Connected!
null_resource.example (remote-exec): total 48
null_resource.example (remote-exec): drwxr-xr-x 6 ubuntu ubuntu 4096 Jul 15 21:27 .
null_resource.example (remote-exec): drwxr-xr-x 3 root   root   4096 Jul 15 20:50 ..
null_resource.example (remote-exec): -rwxr-xr-x 1 ubuntu ubuntu  523 Jul 15 21:34 agentsetup
null_resource.example (remote-exec): -rw------- 1 ubuntu ubuntu  316 Jul 15 21:27 .bash_history
null_resource.example (remote-exec): -rw-r--r-- 1 ubuntu ubuntu  220 Apr  4  2018 .bash_logout
null_resource.example (remote-exec): -rw-r--r-- 1 ubuntu ubuntu 3771 Apr  4  2018 .bashrc
null_resource.example (remote-exec): drwx------ 2 ubuntu ubuntu 4096 Jul 15 20:50 .cache
null_resource.example (remote-exec): drwx------ 3 ubuntu ubuntu 4096 Jul 15 20:50 .gnupg
null_resource.example (remote-exec): drwxrwxr-x 3 ubuntu ubuntu 4096 Jul 15 21:15 .local
null_resource.example (remote-exec): -rw-r--r-- 1 ubuntu ubuntu  807 Apr  4  2018 .profile
null_resource.example (remote-exec): -rwxrwxr-x 1 ubuntu ubuntu  109 Jul 15 21:27 script
null_resource.example (remote-exec): drwx------ 2 ubuntu ubuntu 4096 Jul 15 20:50 .ssh
null_resource.example: Provisioning with 'remote-exec'...
null_resource.example (remote-exec): Connecting to remote host via SSH...
null_resource.example (remote-exec):   Host: 158.160.127.247
null_resource.example (remote-exec):   User: ubuntu
null_resource.example (remote-exec):   Password: false
null_resource.example (remote-exec):   Private key: true
null_resource.example (remote-exec):   Certificate: false
null_resource.example (remote-exec):   SSH Agent: false
null_resource.example (remote-exec):   Checking Host Key: false
null_resource.example (remote-exec):   Target Platform: unix
null_resource.example (remote-exec): Connected!
null_resource.example (remote-exec): All answers correct!
null_resource.example: Creation complete after 1s [id=8037748411407553133]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
