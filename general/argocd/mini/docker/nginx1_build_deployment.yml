---
- name: Build and deploy nginx1 to minikube, run and destroy demo
  hosts: all
  vars:
    nname: nginx1
    ntag: 1
    nnametag: "{{ nname }}:{{ ntag }}"
    src_dir: hello

  pre_tasks:

  - name: Check the status of minikube.
    command: minikube status
    register: minikube_status
    changed_when: false
    ignore_errors: true

  - name: Start minikube if it's not running.
    command: minikube start
    when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"

  tasks:

  - name: Delete Nginx existing service and deployment
    shell: "kubectl delete service,deployment {{ nname }} --ignore-not-found=true"

  - name: Wait for 5 seconds
    pause:
      seconds: 5

  - name: Remove existing Nginx image
    shell: "minikube image rm {{ nnametag }}"
    ignore_errors: true

  - name: Create index.html from template on remote host
    template:
      src: "{{ src_dir }}/index.html.j2"
      dest: index.html
      mode: '0644'

  - name: Copy nginx.conf to remote host
    copy:
      mode: '0644'
      dest: nginx.conf
      src: "{{ src_dir }}/nginx.conf"


  - name: Copy Dockerfile to remote host
    copy:
      mode: '0644'
      dest: Dockerfile
      src: "{{ src_dir }}/Dockerfile"

  - name: Build Nginx image
    shell: "minikube image build -t {{ nnametag }} ."

  - name: Create Nginx deployment
#    shell: "kubectl create deployment nginx1 --image={{ nnametag }}"
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: "{{ nname }}"
          namespace: default
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: "{{ nname }}"
          template:
            metadata:
              labels:
                app: "{{ nname }}"
            spec:
              containers:
                - name: "{{ nname }}"
                  image: "{{ nnametag }}"
                  imagePullPolicy: IfNotPresent
                  ports:
                    - containerPort: 80

  - name: Wait for 15 seconds
    pause:
      seconds: 15

  - name: Get Nginx deployment info
    k8s_info:
      api_version: v1
      kind: Deployment
      name: "{{ nname }}"
      namespace: default
    register: deployment_info

  - name: Print deployment info
    debug:
      msg:
        - "NAME: {{ deployment_info.resources[0].metadata.name }}"
        - "READY: {{ deployment_info.resources[0].status.readyReplicas }}/{{ deployment_info.resources[0].spec.replicas }}"
        - "UP-TO-DATE: {{ deployment_info.resources[0].status.updatedReplicas }}"
        - "AVAILABLE: {{ deployment_info.resources[0].status.availableReplicas }}"
        - "AGE: {{ deployment_info.resources[0].metadata.creationTimestamp | regex_replace('T', ' ') | regex_replace('Z', '') }}"
    when: deployment_info.resources | length > 0

  - name: Get Nginx pod info
    k8s_info:
      api_version: v1
      kind: Pod
      namespace: default
      label_selectors:
        - app={{ nname }}
    register: pod_info


  - name: Print pod information
    debug:
      msg:
        - "NAME: {{ pod_info.resources[0].metadata.name | default('') }}"
        - "READY: {{ pod_info.resources[0].status.containerStatuses | selectattr('ready', 'equalto', true) | list | length | default(0) }}/{{ pod_info.resources[0].spec.containers | length | default(0) }}"
        - "STATUS: {{ pod_info.resources[0].status.phase | default('') }}"
        - "RESTARTS: {{ pod_info.resources[0].status.containerStatuses[0].restartCount | default(0) }} ({{ pod_info.resources[0].status.containerStatuses[0].lastState.terminated.finishedAt | default('unknown') }})"
        - "AGE: {{ pod_info.resources[0].metadata.creationTimestamp | default('unknown') }}"
    when: pod_info.resources | length > 0

  - name: Get services info
    k8s_info:
      api_version: v1
      kind: Service
      name: "{{ nname }}"
      namespace: default
    register: services_info

  - name: Print service information
    debug:
      msg:
        - "NAME: {{ services_info.resources[0].metadata.name }}"
        - "TYPE: {{ services_info.resources[0].spec.type }}"
        - "CLUSTER-IP: {{ services_info.resources[0].spec.clusterIP }}"
        - "EXTERNAL-IP: {% if services_info.resources[0].status.loadBalancer.ingress is defined %}{{ services_info.resources[0].status.loadBalancer.ingress[0].ip }}{% else %}<pending>{% endif %}"
        - "PORT(S): {{ services_info.resources[0].spec.ports[0].port }}:{{ services_info.resources[0].spec.ports[0].nodePort }}/{{ services_info.resources[0].spec.ports[0].protocol }}"
    when: services_info.resources | length > 0

#  - name: Expose Nginx deployment as NodePort service
#    shell: "kubectl expose deployment {{ nname }} --type=NodePort --port=80"
  - name: Expose Nginx deployment as NodePort service
    kubernetes.core.k8s:
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: "{{ nname }}"
          namespace: default
        spec:
          selector:
            app: "{{ nname }}"
          ports:
          - name: http
            port: 80
            targetPort: 80
          type: NodePort

  - name: Get services info
    k8s_info:
      api_version: v1
      kind: Service
      name: "{{ nname }}"
      namespace: default
    register: services_info

  - name: Print service information
    debug:
      msg:
        - "NAME: {{ services_info.resources[0].metadata.name }}"
        - "TYPE: {{ services_info.resources[0].spec.type }}"
        - "CLUSTER-IP: {{ services_info.resources[0].spec.clusterIP }}"
        - "EXTERNAL-IP: {% if services_info.resources[0].status.loadBalancer.ingress is defined %}{{ services_info.resources[0].status.loadBalancer.ingress[0].ip }}{% else %}<pending>{% endif %}"
        - "PORT(S): {{ services_info.resources[0].spec.ports[0].port }}:{{ services_info.resources[0].spec.ports[0].nodePort }}/{{ services_info.resources[0].spec.ports[0].protocol }}"
    when: services_info.resources | length > 0

  - name: Wait for 5 seconds
    pause:
      seconds: 5

  - name: Test Nginx service
    shell: "curl $(minikube service {{ nname }} --url)"
    register: test_result
  - debug:
      var: test_result.stdout_lines

  - name: Start port forwarding with kubectl
    shell: "kubectl port-forward --address 0.0.0.0 service/{{ nname }} 8080:80"
    args:
      executable: /bin/bash
    async: 10
    poll: 0
    register: job

  - name: Wait for port forwarding to start
    pause:
      seconds: 2

  - name: Find the port-forward process ID
    shell: "pgrep -f 'kubectl port-forward --address 0.0.0.0 service/{{ nname }}'"
    register: pgrep_result
    ignore_errors: true

  - name: Test Nginx service from Internet
    uri:
      url: http://{{ ansible_host }}:8080
      method: GET
      return_content: yes
    register: uri_result_external
    delegate_to: localhost
  - debug:
      var: uri_result_external.content

  - name: Kill the port-forward process
    shell: "kill {{ pgrep_result.stdout_lines[0] }}"
    when: pgrep_result.stdout != ""
    ignore_errors: true

  - name: Delete Nginx existing service and deployment
    shell: "kubectl delete service,deployment {{ nname }} --ignore-not-found=true"

  - name: Wait for 5 seconds
    pause:
      seconds: 5

  - name: Remove existing Nginx image
    shell: "minikube image rm {{ nnametag }}"
    ignore_errors: true
